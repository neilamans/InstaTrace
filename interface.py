import json
import os
from datetime import datetime

import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
import streamlit as st

# Configuration de la page
st.set_page_config(
    page_title="InstaTrace - POC",
    page_icon="üîç",
    layout="wide"
)

st.title("InstaTrace - Proof of Concept")
st.markdown("""
Cette d√©monstration pr√©sente les capacit√©s de d√©tection d'anomalies d'InstaTrace. 
Le syst√®me analyse les comportements des utilisateurs et identifie les activit√©s suspectes
en se basant sur des mod√®les d'apprentissage automatique.
""")

# D√©finir les utilisateurs
users = [
    {"name": "neila.mansouri@outlook.com", "usual_countries": ["FR", "GB"], "usual_hours": range(8, 22)},
    {"name": "rania.bordjiba@outlook.com", "usual_countries": ["FR", "DZ"], "usual_hours": range(9, 23)},
    {"name": "destiny.hanna@outlook.com", "usual_countries": ["FR", "US"], "usual_hours": range(7, 21)}
]

# Charger les donn√©es
@st.cache_data
def load_data():
    if os.path.exists("output/results.csv") and os.path.exists("output/suspicious_cases.csv"):
        results = pd.read_csv("output/results.csv")
        suspicious = pd.read_csv("output/suspicious_cases.csv")
        

        if 'timestamp' in results.columns:
            results['timestamp'] = pd.to_datetime(results['timestamp'])
        if 'timestamp' in suspicious.columns:
            suspicious['timestamp'] = pd.to_datetime(suspicious['timestamp'])
        
        return results, suspicious
    else:
        st.error("Les fichiers de donn√©es n'ont pas √©t√© trouv√©s. Veuillez ex√©cuter le script d'analyse au pr√©alable.")
        return pd.DataFrame(), pd.DataFrame()

results_df, suspicious_df = load_data()

if not results_df.empty:
    # Afficher les statistiques g√©n√©rales
    st.header("Tableau de bord")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        total_events = len(results_df)
        st.metric("Total des √©v√©nements analys√©s", total_events)
    
    with col2:
        anomaly_count = len(results_df[results_df['anomaly'] == 'Anomalie'])
        st.metric("Anomalies d√©tect√©es", anomaly_count, f"{anomaly_count/total_events*100:.1f}%")
    
    with col3:
        high_risk = len(results_df[results_df['anomaly_probability'] > 0.8])
        st.metric("Alertes haute priorit√©", high_risk)
    
    # Graphique de distribution des probabilit√©s d'anomalie
    st.subheader("Distribution des probabilit√©s d'anomalie")
    
    fig = px.histogram(
        results_df,
        x='anomaly_probability',
        nbins=30,
        color_discrete_sequence=['#3366CC'],
        opacity=0.7
    )
    fig.update_layout(
        xaxis_title="Probabilit√© d'anomalie",
        yaxis_title="Nombre d'√©v√©nements"
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Graphiques par heure et jour de la semaine
    st.subheader("R√©partition des activit√©s")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique par heure
        hour_data = results_df.groupby(['hour_of_day', 'anomaly']).size().reset_index(name='count')
        
        fig = px.bar(
            hour_data, 
            x='hour_of_day', 
            y='count', 
            color='anomaly',
            labels={'hour_of_day': 'Heure de la journ√©e', 'count': 'Nombre d\'√©v√©nements'},
            title="Activit√©s par heure",
            color_discrete_map={'Normal': '#3366CC', 'Anomalie': '#DC3912'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Graphique par jour de la semaine
        day_names = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']
        results_df['day_name'] = results_df['day_of_week'].apply(lambda x: day_names[int(x)] if pd.notna(x) and 0 <= x < 7 else 'Inconnu')
        
        day_data = results_df.groupby(['day_name', 'anomaly']).size().reset_index(name='count')
        
        fig = px.bar(
            day_data, 
            x='day_name', 
            y='count', 
            color='anomaly',
            labels={'day_name': 'Jour de la semaine', 'count': 'Nombre d\'√©v√©nements'},
            title="Activit√©s par jour",
            color_discrete_map={'Normal': '#3366CC', 'Anomalie': '#DC3912'},
            category_orders={"day_name": day_names}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Activit√©s par pays
    st.subheader("Activit√©s par pays")
    
    country_data = results_df.groupby(['location.countryOrRegion', 'anomaly']).size().reset_index(name='count')
    
    fig = px.bar(
        country_data, 
        x='location.countryOrRegion', 
        y='count', 
        color='anomaly',
        labels={'location.countryOrRegion': 'Pays', 'count': 'Nombre d\'√©v√©nements'},
        color_discrete_map={'Normal': '#3366CC', 'Anomalie': '#DC3912'}
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Alertes de haute priorit√©
    st.header("Alertes de haute priorit√©")
    
    if not suspicious_df.empty:
        for idx, row in suspicious_df.head(5).iterrows():
            with st.expander(f"Alerte #{idx+1}: {row['user']} - {row['action']} ({row['timestamp']})"):
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    st.markdown(f"**Utilisateur:** {row['user']}")
                    st.markdown(f"**Action:** {row['action']}")
                    st.markdown(f"**Date/Heure:** {row['timestamp']}")
                    st.markdown(f"**Pays:** {row.get('location.countryOrRegion', 'Inconnu')}")
                    st.markdown(f"**Appareil:** {row.get('deviceType', 'Inconnu')}")
                    st.markdown(f"**Probabilit√© d'anomalie:** {row['anomaly_probability']:.2f}")
                
                with col2:
                    # Afficher les raisons de l'alerte
                    st.markdown("### Raisons de l'alerte")
                    
                    reasons = []
                    
                    if 'is_night' in row and row['is_night'] == 1:
                        reasons.append("üïì Activit√© en dehors des heures habituelles")
                    
                    normal_countries = []
                    for user_info in [u for u in users if u['name'] in str(row['user'])]:
                        normal_countries = user_info.get('usual_countries', [])
                    
                    if 'location.countryOrRegion' in row and row['location.countryOrRegion'] not in normal_countries and row['location.countryOrRegion'] != 'Unknown':
                        reasons.append(f"üåç Connexion depuis un pays inhabituel ({row['location.countryOrRegion']})")
                    
                    if 'action' in row and row['action'] in ['download_all_files', 'change_permissions', 'reset_password', 'Modify permissions']:
                        reasons.append(f"‚ö†Ô∏è Action sensible ({row['action']})")
                    
                    if not reasons:
                        reasons.append("üîç Combinaison inhabituelle de facteurs")
                    
                    for reason in reasons:
                        st.markdown(f"- {reason}")
                    
                    st.markdown("### Recommandations")
                    st.markdown("- V√©rifier l'identit√© de l'utilisateur")
                    st.markdown("- Examiner le contexte de l'activit√©")
                    st.markdown("- Envisager de bloquer temporairement l'acc√®s si n√©cessaire")
                    st.markdown("- Renforcer l'authentification pour cet utilisateur")
    
    # Statistiques par utilisateur
    st.header("Statistiques par utilisateur")
    
    # S√©lectionner l'utilisateur
    users_list = results_df['user'].unique().tolist()
    selected_user = st.selectbox("S√©lectionner un utilisateur", users_list)
    
    # Filtrer les donn√©es pour l'utilisateur s√©lectionn√©
    user_data = results_df[results_df['user'] == selected_user]
    
    if not user_data.empty:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_user_events = len(user_data)
            st.metric("Total des activit√©s", total_user_events)
        
        with col2:
            user_anomaly_count = len(user_data[user_data['anomaly'] == 'Anomalie'])
            st.metric("Anomalies", user_anomaly_count, f"{user_anomaly_count/total_user_events*100:.1f}%")
        
        with col3:
            countries = user_data['location.countryOrRegion'].nunique()
            st.metric("Pays d'acc√®s uniques", countries)
        
        # Chronologie des activit√©s
        st.subheader("Chronologie des activit√©s")
        
        # S'assurer que timestamp est une colonne datetime
        if 'timestamp' in user_data.columns and not pd.api.types.is_datetime64_any_dtype(user_data['timestamp']):
            user_data['timestamp'] = pd.to_datetime(user_data['timestamp'])
        
        # Trier par timestamp
        user_data_sorted = user_data.sort_values('timestamp')
        
        fig = px.scatter(
            user_data_sorted,
            x='timestamp',
            y='anomaly_probability',
            color='anomaly',
            size='anomaly_probability',
            hover_data=['action', 'location.countryOrRegion', 'hour_of_day'],
            labels={
                'timestamp': 'Date et heure', 
                'anomaly_probability': 'Probabilit√© d\'anomalie',
                'action': 'Action',
                'location.countryOrRegion': 'Pays',
                'hour_of_day': 'Heure'
            },
            title=f"Chronologie des activit√©s pour {selected_user}",
            color_discrete_map={'Normal': '#3366CC', 'Anomalie': '#DC3912'}
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # R√©partition des actions
        st.subheader("R√©partition des actions")
        
        action_counts = user_data['action'].value_counts().reset_index()
        action_counts.columns = ['action', 'count']
        
        fig = px.pie(
            action_counts,
            values='count',
            names='action',
            title=f"Actions effectu√©es par {selected_user}"
        )
        st.plotly_chart(fig, use_container_width=True)
else:
    st.info("Veuillez charger et analyser des donn√©es pour visualiser les r√©sultats.")

# Pied de page
st.markdown("---")
st.markdown("""
<div style="text-align: center">
    <h3>InstaTrace</h3>
    <p>Prot√©ger vos habitudes num√©riques, anticiper les cybermenaces.</p>
    <p>¬© 2025 Rania BORDJIBA, Destiny HANNA, Neila Cam√©lia MANSOURI</p>
</div>
""", unsafe_allow_html=True)